{"version":3,"sources":["Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Scroll","props","style","overflowY","height","className","children","App","state","username","avatar_url","public_repos","repositories","kayttaja","fetch","then","response","json","e","preventDefault","this","getUser","refs","value","user","setState","login","handleUser","repo","fetchRepos","href","onSubmit","handleSubmit","htmlFor","ref","id","type","aria-describedby","src","map","a","html_url","name","description","created_at","updated_at","commits_url","full_name","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRAUeA,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,SAAUC,UAAU,aACxDJ,EAAMK,WCgGJC,G,wBA/Ff,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACXC,SAAW,GACXC,WAAa,KACbC,aAAe,KACfC,aAAe,IANN,E,qEAUHC,GACN,OAAOC,MAAM,gCAAD,OAAiCD,IAC5CE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACJ,OAAOA,O,mCAIQE,G,+EACjBA,EAAEC,iB,mBACeC,KAAKC,QAAQD,KAAKE,KAAKb,SAASc,Q,OAA7CC,E,OACJJ,KAAKK,SAAS,CAAChB,SAAUe,EAAKE,MAC5BhB,WAAac,EAAKd,WAClBC,aAAea,EAAKb,eAEtBS,KAAKO,WAAWT,G,kFAGPU,GACT,OAAOd,MAAM,gCAAD,OAAiCc,EAAjC,WACXb,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACJ,OAAOA,O,iCAIME,G,+EACfA,EAAEC,iB,mBACeC,KAAKS,WAAWT,KAAKE,KAAKb,SAASc,Q,OAAhDK,E,OACJR,KAAKK,SAAS,CAACb,aAAegB,I,gFAItB,IAAD,OACP,OACE,yBAAKvB,UAAU,aACb,4BAAQA,UAAU,iBAChB,wBAAIA,UAAU,wCAAd,mBACA,wBAAIA,UAAU,gCAAd,gBACA,wBAAIA,UAAU,sCAAd,WACA,uBAAGA,UAAU,4DAA4DyB,KAAK,kCAA9E,WAEF,0BAAMC,SAAU,SAAAb,GAAC,OAAI,EAAKc,aAAad,IAAIb,UAAU,gBACnD,yBAAKA,UAAU,WACb,2BAAO4B,QAAQ,OAAO5B,UAAU,kBAAhC,2BAAgE,0BAAMA,UAAU,mBAAhB,sDAChE,2BAAO6B,IAAI,WAAWC,GAAG,OAAO9B,UAAU,8CAA8C+B,KAAK,OAAOC,mBAAiB,gBAGzH,kBAAC,EAAD,KACE,yBAAKhC,UAAU,OAEb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,OACb,yBAAKiC,IAAKlB,KAAKZ,MAAME,cAEvB,yBAAKL,UAAU,WACZe,KAAKZ,MAAMC,SAAS,6BACpBW,KAAKZ,MAAMG,eAIhB,yBAAKN,UAAU,SACb,4BACKe,KAAKZ,MAAMI,aAAa2B,KAAK,SAAAC,GAAC,OAC7B,wBAAInC,UAAU,8BACZ,6BAAK,uBAAGyB,KAAMU,EAAEC,SAAUpC,UAAU,oEAAoEmC,EAAEE,MAC1G,6BAFF,YAEiBF,EAAEG,YAFnB,IAGE,6BAHF,eAGoBH,EAAEI,WACpB,6BAJF,uBAIyBJ,EAAEK,WACzB,6BAAML,EAAEM,YACR,6BANF,cAMmBN,EAAEO,wB,GAlFzBC,c,MCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAA8C,GACjCA,EAAaC,iB","file":"static/js/main.fadad857.chunk.js","sourcesContent":["import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', height:'300px'}} className=\"Container\">\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component, useImperativeHandle } from 'react';\nimport Scroll from '../Components/Scroll';\nimport './App.css';\nimport '../Components/ExampleCard.css';\n\nclass App extends Component {\nconstructor(){\n  super();\n  this.state = {\n    username : '',\n    avatar_url : null,\n    public_repos : null,\n    repositories : []\n  }\n}\n\n  getUser(kayttaja){\n    return fetch(`https://api.github.com/users/${kayttaja}`)\n    .then(response => response.json())\n    .then(response => {\n      return response\n    })\n  }\n\n  async handleSubmit(e){\n    e.preventDefault();\n    let user = await this.getUser(this.refs.username.value);\n    this.setState({username: user.login,\n      avatar_url : user.avatar_url,\n      public_repos : user.public_repos\n    })\n    this.handleUser(e);\n  }\n\n  fetchRepos(repo){\n    return fetch(`https://api.github.com/users/${repo}/repos`)\n    .then(response => response.json())\n    .then(response => {\n      return response\n    })\n  }\n\n  async handleUser(e){\n    e.preventDefault();\n    let repo = await this.fetchRepos(this.refs.username.value);\n    this.setState({repositories : repo})\n\n  }\n  \n  render() {\n    return (\n      <div className=\"Container\">\n        <header className=\"tc pv4 pv5-ns\">\n          <h1 className=\"f5 f4-ns fw6 white hover-red tracked\">GitHub - Finder</h1>\n          <h2 className=\"f5 f4-ns fw6 white hover-red\">Aleksi Aalto</h2>\n          <h3 className=\"f6 white fw2 ttu tracked hover-red\">Tampere</h3>\n          <a className=\"f6 grow no-underline br-pill ph5 pv2 mb1 dib white bg-red\" href=\"https://github.com/AleksiAalto\">GitHub</a>\n        </header>\n        <form onSubmit={e => this.handleSubmit(e)} className=\"pa4 white-80\">\n          <div className=\"measure\">\n            <label htmlFor=\"name\" className=\"tc f6 b db mb2\">Käyttäjätunnus <span className=\"normal white-60\">(Kirjoita käyttäjätunnus ja paina enter)</span></label>\n            <input ref='username' id=\"name\" className=\"input-reset ba b--black-20 pa2 mb2 db w-100\" type=\"text\" aria-describedby=\"name-desc\"></input>\n          </div>\n        </form>\n        <Scroll>\n          <div className=\"Box\">\n\n            <div className=\"Context\">\n              <div className=\"Kortti\">\n                <div className=\"pic\">\n                  <img src={this.state.avatar_url}></img>\n                </div>\n                <div className=\"Otsikko\">\n                  {this.state.username}<br/>\n                  {this.state.public_repos}\n                </div>\n              </div>\n\n              <div className=\"repos\">\n                <ul>\n                    {this.state.repositories.map((a => \n                      <li className=\"ph3 pv3 bb b--light-silver\">\n                        <br/><a href={a.html_url} className=\"f4 fw7 dib pa2 no-underline bg-animate hover-bg-light-blue white\">{a.name}</a>\n                        <br/>Kuvaus: \"{a.description}\"\n                        <br/>Repo luotu: {a.created_at}\n                        <br/>Repo päivitetty: {a.updated_at}\n                        <br/>{a.commits_url}\n                        <br/>Koko nimi: {a.full_name}\n                      </li>\n                    ))}\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport 'tachyons';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}